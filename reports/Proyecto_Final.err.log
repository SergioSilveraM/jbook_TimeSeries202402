Traceback (most recent call last):
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def tlsmooth(y, delta_, y_tilde_start=None, lambda_start=1):
    T = len(y)
    
    Qt = np.zeros(T)
    Dt = np.zeros(T)
    y_tilde = np.zeros(T)
    lambd = np.zeros(T)
    err = np.zeros(T)
    
    lambd[0] = lambda_start
    if y_tilde_start is None:
        y_tilde[0] = y.iloc[0]  # Use `.iloc` for Positional Access.
    else:
        y_tilde[0] = y_tilde_start  
    
    for i in range(1, T):
        err[i] = y.iloc[i] - y_tilde[i-1]  
        Qt[i] = delta_ * err[i] + (1 - delta_) * Qt[i-1]
        Dt[i] = delta_ * abs(err[i]) + (1 - delta_) * Dt[i-1]
        lambd[i] = abs(Qt[i] / Dt[i])
        y_tilde[i] = lambd[i] * y.iloc[i] + (1 - lambd[i]) * y_tilde[i-1]  
    
    return np.column_stack((y_tilde, lambd, err, Qt, Dt))

delta_=0.3
train_tl_sq = tlsmooth(train_data['SalesQuantityIP'], delta_=delta_)
val_tl_sq = tlsmooth(val_data['SalesQuantityIP'], delta_=delta_)

fig = go.Figure()

fig.add_trace(go.Scatter(
    x=train_data.index, 
    y=train_data['SalesQuantityIP'], 
    mode='lines', 
    marker=dict(color='black', size=6), 
    name='Train'
))

fig.add_trace(go.Scatter(
    x=train_data.index, 
    y=train_tl_sq[:, 0],  
    mode='lines', 
    line=dict(color='blue'), 
    name='TL Smoother Train'
))

fig.add_trace(go.Scatter(
    x=val_data.index, 
    y=val_data['SalesQuantityIP'], 
    mode='lines', 
    marker=dict(color='black', size=6), 
    name='Val'
))

fig.add_trace(go.Scatter(
    x=val_data.index, 
    y=val_tl_sq[:, 0],  
    mode='lines', 
    line=dict(color='red'), 
    name='TL Smoother Val'
))

fig.update_layout(
    title='SalesQuantity with Exponential and TL Smoother',
    xaxis_title='Date',
    yaxis_title='SalesQuantityIP',
    legend_title='Series',
    showlegend=True
)

fig.show()

------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
File [0;32m~/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/pandas/core/indexes/base.py:3805[0m, in [0;36mIndex.get_loc[0;34m(self, key)[0m
[1;32m   3804[0m [38;5;28;01mtry[39;00m:
[0;32m-> 3805[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_engine[49m[38;5;241;43m.[39;49m[43mget_loc[49m[43m([49m[43mcasted_key[49m[43m)[49m
[1;32m   3806[0m [38;5;28;01mexcept[39;00m [38;5;167;01mKeyError[39;00m [38;5;28;01mas[39;00m err:

File [0;32mindex.pyx:167[0m, in [0;36mpandas._libs.index.IndexEngine.get_loc[0;34m()[0m

File [0;32mindex.pyx:196[0m, in [0;36mpandas._libs.index.IndexEngine.get_loc[0;34m()[0m

File [0;32mpandas/_libs/hashtable_class_helper.pxi:7081[0m, in [0;36mpandas._libs.hashtable.PyObjectHashTable.get_item[0;34m()[0m

File [0;32mpandas/_libs/hashtable_class_helper.pxi:7089[0m, in [0;36mpandas._libs.hashtable.PyObjectHashTable.get_item[0;34m()[0m

[0;31mKeyError[0m: 'SalesQuantityIP'

The above exception was the direct cause of the following exception:

[0;31mKeyError[0m                                  Traceback (most recent call last)
Cell [0;32mIn[56], line 26[0m
[1;32m     23[0m     [38;5;28;01mreturn[39;00m np[38;5;241m.[39mcolumn_stack((y_tilde, lambd, err, Qt, Dt))
[1;32m     25[0m delta_[38;5;241m=[39m[38;5;241m0.3[39m
[0;32m---> 26[0m train_tl_sq [38;5;241m=[39m tlsmooth([43mtrain_data[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mSalesQuantityIP[39;49m[38;5;124;43m'[39;49m[43m][49m, delta_[38;5;241m=[39mdelta_)
[1;32m     27[0m val_tl_sq [38;5;241m=[39m tlsmooth(val_data[[38;5;124m'[39m[38;5;124mSalesQuantityIP[39m[38;5;124m'[39m], delta_[38;5;241m=[39mdelta_)
[1;32m     29[0m fig [38;5;241m=[39m go[38;5;241m.[39mFigure()

File [0;32m~/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/pandas/core/frame.py:4102[0m, in [0;36mDataFrame.__getitem__[0;34m(self, key)[0m
[1;32m   4100[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mcolumns[38;5;241m.[39mnlevels [38;5;241m>[39m [38;5;241m1[39m:
[1;32m   4101[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_getitem_multilevel(key)
[0;32m-> 4102[0m indexer [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mcolumns[49m[38;5;241;43m.[39;49m[43mget_loc[49m[43m([49m[43mkey[49m[43m)[49m
[1;32m   4103[0m [38;5;28;01mif[39;00m is_integer(indexer):
[1;32m   4104[0m     indexer [38;5;241m=[39m [indexer]

File [0;32m~/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/pandas/core/indexes/base.py:3812[0m, in [0;36mIndex.get_loc[0;34m(self, key)[0m
[1;32m   3807[0m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(casted_key, [38;5;28mslice[39m) [38;5;129;01mor[39;00m (
[1;32m   3808[0m         [38;5;28misinstance[39m(casted_key, abc[38;5;241m.[39mIterable)
[1;32m   3809[0m         [38;5;129;01mand[39;00m [38;5;28many[39m([38;5;28misinstance[39m(x, [38;5;28mslice[39m) [38;5;28;01mfor[39;00m x [38;5;129;01min[39;00m casted_key)
[1;32m   3810[0m     ):
[1;32m   3811[0m         [38;5;28;01mraise[39;00m InvalidIndexError(key)
[0;32m-> 3812[0m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m(key) [38;5;28;01mfrom[39;00m [38;5;21;01merr[39;00m
[1;32m   3813[0m [38;5;28;01mexcept[39;00m [38;5;167;01mTypeError[39;00m:
[1;32m   3814[0m     [38;5;66;03m# If we have a listlike key, _check_indexing_error will raise[39;00m
[1;32m   3815[0m     [38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise[39;00m
[1;32m   3816[0m     [38;5;66;03m#  the TypeError.[39;00m
[1;32m   3817[0m     [38;5;28mself[39m[38;5;241m.[39m_check_indexing_error(key)

[0;31mKeyError[0m: 'SalesQuantityIP'

