Traceback (most recent call last):
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Apply Smoothing with Moving Average (# Window of 4 Weeks and 12 Weeks).
weekly_sales['Moving_Average_4'] = weekly_sales['Weekly_Sales'].rolling(window=4).mean()
weekly_sales['Moving_Average_12'] = weekly_sales['Weekly_Sales'].rolling(window=12).mean()

fig = make_subplots(rows=1, cols=2, subplot_titles=("Moving Averages (4 Weeks)", "Moving Averages (12 Weeks)"))

# Add 4-Weeks Moving Average Graph to First Column.
fig.add_trace(go.Scatter(x=weekly_sales['Date'], y=weekly_sales['Weekly_Sales'],
                         mode='lines', name='Original Sales', line=dict(color='blue')),
              row=1, col=1)

fig.add_trace(go.Scatter(x=weekly_sales['Date'], y=weekly_sales['Moving_Average_4'],
                         mode='lines', name='Moving Averages (4 Weeks)', line=dict(color='red')),
              row=1, col=1)

# Add 12-Weeks Moving Average Graph to Second Column.
fig.add_trace(go.Scatter(x=weekly_sales['Date'], y=weekly_sales['Weekly_Sales'],
                         mode='lines', name='Original Sales', line=dict(color='blue')),
              row=1, col=2)

fig.add_trace(go.Scatter(x=weekly_sales['Date'], y=weekly_sales['Moving_Average_12'],
                         mode='lines', name='Moving Averages (12 Weeks)', line=dict(color='green')),
              row=1, col=2)

fig.update_layout(title_text="Comparison of Moving Averages (4 Weeks vs 12 Weeks)", 
                  showlegend=False, height=600, width=1200)

# Mostrar la figura
fig.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mDateParseError[0m                            Traceback (most recent call last)
File [0;32m~/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/pandas/core/indexes/datetimes.py:603[0m, in [0;36mDatetimeIndex.get_loc[0;34m(self, key)[0m
[1;32m    602[0m [38;5;28;01mtry[39;00m:
[0;32m--> 603[0m     parsed, reso [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_parse_with_reso[49m[43m([49m[43mkey[49m[43m)[49m
[1;32m    604[0m [38;5;28;01mexcept[39;00m ([38;5;167;01mValueError[39;00m, pytz[38;5;241m.[39mNonExistentTimeError) [38;5;28;01mas[39;00m err:

File [0;32m~/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/pandas/core/indexes/datetimes.py:559[0m, in [0;36mDatetimeIndex._parse_with_reso[0;34m(self, label)[0m
[1;32m    558[0m [38;5;28;01mdef[39;00m [38;5;21m_parse_with_reso[39m([38;5;28mself[39m, label: [38;5;28mstr[39m):
[0;32m--> 559[0m     parsed, reso [38;5;241m=[39m [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[43m_parse_with_reso[49m[43m([49m[43mlabel[49m[43m)[49m
[1;32m    561[0m     parsed [38;5;241m=[39m Timestamp(parsed)

File [0;32m~/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/pandas/core/indexes/datetimelike.py:293[0m, in [0;36mDatetimeIndexOpsMixin._parse_with_reso[0;34m(self, label)[0m
[1;32m    291[0m     label [38;5;241m=[39m [38;5;28mstr[39m(label)
[0;32m--> 293[0m parsed, reso_str [38;5;241m=[39m [43mparsing[49m[38;5;241;43m.[39;49m[43mparse_datetime_string_with_reso[49m[43m([49m[43mlabel[49m[43m,[49m[43m [49m[43mfreqstr[49m[43m)[49m
[1;32m    294[0m reso [38;5;241m=[39m Resolution[38;5;241m.[39mfrom_attrname(reso_str)

File [0;32mparsing.pyx:442[0m, in [0;36mpandas._libs.tslibs.parsing.parse_datetime_string_with_reso[0;34m()[0m

File [0;32mparsing.pyx:666[0m, in [0;36mpandas._libs.tslibs.parsing.dateutil_parse[0;34m()[0m

[0;31mDateParseError[0m: Unknown datetime string format, unable to parse: Weekly_Sales

The above exception was the direct cause of the following exception:

[0;31mKeyError[0m                                  Traceback (most recent call last)
Cell [0;32mIn[14], line 2[0m
[1;32m      1[0m [38;5;66;03m# Apply Smoothing with Moving Average (# Window of 4 Weeks and 12 Weeks).[39;00m
[0;32m----> 2[0m weekly_sales[[38;5;124m'[39m[38;5;124mMoving_Average_4[39m[38;5;124m'[39m] [38;5;241m=[39m [43mweekly_sales[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mWeekly_Sales[39;49m[38;5;124;43m'[39;49m[43m][49m[38;5;241m.[39mrolling(window[38;5;241m=[39m[38;5;241m4[39m)[38;5;241m.[39mmean()
[1;32m      3[0m weekly_sales[[38;5;124m'[39m[38;5;124mMoving_Average_12[39m[38;5;124m'[39m] [38;5;241m=[39m weekly_sales[[38;5;124m'[39m[38;5;124mWeekly_Sales[39m[38;5;124m'[39m][38;5;241m.[39mrolling(window[38;5;241m=[39m[38;5;241m12[39m)[38;5;241m.[39mmean()
[1;32m      5[0m fig [38;5;241m=[39m make_subplots(rows[38;5;241m=[39m[38;5;241m1[39m, cols[38;5;241m=[39m[38;5;241m2[39m, subplot_titles[38;5;241m=[39m([38;5;124m"[39m[38;5;124mMoving Averages (4 Weeks)[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mMoving Averages (12 Weeks)[39m[38;5;124m"[39m))

File [0;32m~/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/pandas/core/series.py:1121[0m, in [0;36mSeries.__getitem__[0;34m(self, key)[0m
[1;32m   1118[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_values[key]
[1;32m   1120[0m [38;5;28;01melif[39;00m key_is_scalar:
[0;32m-> 1121[0m     [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_get_value[49m[43m([49m[43mkey[49m[43m)[49m
[1;32m   1123[0m [38;5;66;03m# Convert generator to list before going through hashable part[39;00m
[1;32m   1124[0m [38;5;66;03m# (We will iterate through the generator there to check for slices)[39;00m
[1;32m   1125[0m [38;5;28;01mif[39;00m is_iterator(key):

File [0;32m~/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/pandas/core/series.py:1237[0m, in [0;36mSeries._get_value[0;34m(self, label, takeable)[0m
[1;32m   1234[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_values[label]
[1;32m   1236[0m [38;5;66;03m# Similar to Index.get_value, but we do not fall back to positional[39;00m
[0;32m-> 1237[0m loc [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mindex[49m[38;5;241;43m.[39;49m[43mget_loc[49m[43m([49m[43mlabel[49m[43m)[49m
[1;32m   1239[0m [38;5;28;01mif[39;00m is_integer(loc):
[1;32m   1240[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_values[loc]

File [0;32m~/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/pandas/core/indexes/datetimes.py:605[0m, in [0;36mDatetimeIndex.get_loc[0;34m(self, key)[0m
[1;32m    603[0m     parsed, reso [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_parse_with_reso(key)
[1;32m    604[0m [38;5;28;01mexcept[39;00m ([38;5;167;01mValueError[39;00m, pytz[38;5;241m.[39mNonExistentTimeError) [38;5;28;01mas[39;00m err:
[0;32m--> 605[0m     [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m(key) [38;5;28;01mfrom[39;00m [38;5;21;01merr[39;00m
[1;32m    606[0m [38;5;28mself[39m[38;5;241m.[39m_disallow_mismatched_indexing(parsed)
[1;32m    608[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39m_can_partial_date_slice(reso):

[0;31mKeyError[0m: 'Weekly_Sales'

